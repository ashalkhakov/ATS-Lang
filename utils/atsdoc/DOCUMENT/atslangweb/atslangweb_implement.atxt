%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
(* ****** ****** *)
//
#define ISTEMP 0
//
#include "atslangwebatxt.dats"
//
val _ATSLANGWEBIMPLEMENT: text =
  strcst"<strong>Implementations</strong>"
val () = theTextMap_insert_str ("ATSLANGWEBIMPLEMENT", _ATSLANGWEBIMPLEMENT)
//
(* ****** ****** *)
//
#include "atslangweb_layout.dats"
//
(* ****** ****** *)

val theCSSfilr =
  $STDIO.fopen_ref_exn ("styles/atslangweb_implement.css", file_mode_w)
val () = fprintf (theCSSfilr,
  "@import url(%s/styles/atslangweb_temp.css);\n\n", @(ATSLANGWEBROOT)
) // end of [val]

fun addcssrule
  (rule: string): text = let
  val () = fprint_string (theCSSfilr, rule) in TEXTnil ()
end // end of [addcssrule]

(* ****** ****** *)
//
%}

#strsub[theStyleSheetLink]("\
#ATSLANGWEBROOTget()/styles/atslangweb_implement.css\
")

#ignoretxt(
#strsub[thePageHeaderSeparator]('\
<div class="Page-mysitelinks">
#mysitelinks("IMPLEMENT")
</div>
'))

#addcssrule("\
\#thePageBody-prop {
padding-left: 10px ;
padding-right: 10px ;
}
")
#strsub[thePageBody]('\
<div id="thePageBody-prop">

<!-- ****** ****** -->

<h1>Implementations</h1>

#menu('\
#lisub("#ulink("\#ATS_Proto", "ATS/Proto"): the first implementation")
#lisub("#ulink("\#ATS_Geizella", "ATS/Geizella"): a previously released implementation")
#lisub("#ulink("\#ATS_Anairiats", "ATS/Anairiats"): the currently released implementation")
')#comment("menu")

#HR(6)

<h2>#uid("ATS_Proto", "ATS/Proto")</h2>

#para("\

ATS/Proto, written in #ulink("http://caml.inria.fr/ocaml", "OCaml"), is the
first complete implementation of ATS. In this implementation, the standard
boxed data representation is chosen to implement parametric
polymorphism. There is direct support in ATS/Proto for object-oriented
programming (OOP), which is no longer available in later implementations of
ATS. Also, there is support in ATS/Proto for typed meta-programming (MP),
that is, constructing programs that can output well-typed programs, which
is abandoned in later implementations. As of now, ATS/Proto is no longer
actively maintained and its main purpose is to serve as an example for
future reference.

")#comment("para")

#HR(2)

<h2>#uid("ATS_Geizella", "ATS/Geizella")</h2>

#para('\

#ulink("\
http://ats-lang.svn.sourceforge.net/viewvc/ats-lang/bootstrap/geizella\
", "ATS/Geizella"
) is a previously released implementation of ATS, which is also written in
#ulink("http://caml.inria.fr/ocaml", "OCaml").  In this implementation, the
native unboxed data representation (as is in C) is adopted, making
ATS/Geizella particularly well-suited for direct interaction with C (that
incurs no run-time overhead).  As for parametric polymorphism, it is
supported in ATS/Geizella through the use of templates.  ATS/Geizella is
now largely out of active use as ATS/Anairiats, a compiler for ATS that is
almost entirely written in ATS, has been bootstrapped successfully (with
the help of ATS/Geizella).

')

#HR(2)

<h2>#uid("ATS_Anairiats", "ATS/Anairiats")</h2>

#para('\

#ulink("\
http://ats-lang.svn.sourceforge.net/viewvc/ats-lang/trunk", "ATS/Anairiats"
) is the currently released implementation of
ATS. It is nearly entirely written in ATS itself, consisting of about
100,000 lines source code written in ATS.  When compared to ATS/Geizella, a
previous implementation of ATS, ATS/Anairiats is significantly more
efficient, and in general it issues more informative messages for
identifying program errors.

')

<!-- ****** ****** -->

</div>#comment("div/id=thePageBody-prop")
')#comment("strsub")

<!-- ****** ****** -->

#ignoretxt(
#strsub[thePageFooterSeparator]('\
<div class="Page-mysitelinks">
#mysitelinks("IMPLEMENT")
</div>
'))

%{

implement
main () = {
//
val () =  $STDIO.fclose_exn (theCSSfilr)
//
val () = fprint_filsub (stdout_ref, "atslangweb_temp.html")
//
} // end of [main]

%}
