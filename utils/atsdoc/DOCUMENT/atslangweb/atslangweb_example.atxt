%{
//
staload STDIO = "libc/SATS/stdio.sats"
//
(* ****** ****** *)
//
#define ISTEMP 0
//
#include "atslangwebatxt.dats"
//
val _ATSLANGWEBEXAMPLE: text =
  strcst"<strong>Examples</strong>"
val () = theTextMap_insert_str ("ATSLANGWEBEXAMPLE", _ATSLANGWEBEXAMPLE)
//
(* ****** ****** *)
//
#include "atslangweb_layout.dats"
//
(* ****** ****** *)

val theCSSfilr =
  $STDIO.fopen_ref_exn ("styles/atslangweb_example.css", file_mode_w)
val () = fprintf (theCSSfilr,
  "@import url(%s/styles/atslangweb_temp.css);\n\n", @(ATSLANGWEBROOT)
) // end of [val]

fun addcssrule
  (rule: string): text = let
  val () = fprint_string (theCSSfilr, rule) in TEXTnil ()
end // end of [addcssrule]

(* ****** ****** *)
//
%}

#strsub[theStyleSheetLink]("\
#ATSLANGWEBROOTget()/styles/atslangweb_example.css\
")

#ignoretxt(
#strsub[thePageHeaderSeparator]('\
<div class="Page-mysitelinks">
#mysitelinks("EXAMPLE")
</div>
'))

#addcssrule("\
\#thePageBody-prop {
padding-left: 10px ;
padding-right: 10px ;
}
")
#strsub[thePageBody]('\
<div id="thePageBody-prop">

<!-- ****** ****** -->

<h1>Examples</h1>

#menu('\
#litxt(#ulink("\#HW_example", "Hello, world!"))
#lisub('\
#ulink("\#FIB_example", "Computing Fibonacci Numbers:") an example of programming with theorem-proving
')
')#comment("menu")

#HR(2)

<h2>#uid("HW_example", "Hello, world!")</h2>

#para('
Following is a complete program in ATS for printing out the string
"Hello, world!" plus a newline:
')#comment("para")

#atscode2xmld('\
implement main () = print ("Hello, world!\\\n")
')

#para('\

Assume that the program is stored in a file named #filename("hello.dats"). By
executing the following command-line:

')

#command("atscc -o hello hello.dats")

#para('\

we can generate an executable named #filename("hello"), which does what is
mentioned above if executed. The command #emph("atscc") first compiles the
ATS program contained in #filename("hello.dats") into some C code and then
invokes a C compiler (e.g., gcc) to translate the C code into binary object
code.

')

#HR(1)

<h2>#uid("FIB_example", "Computing Fibonacci Numbers")</h2>

#para("\

The paradigm of programming with theorem-proving (PwTP) is a cornerstone of
ATS, and a simple example to illustrate this programming paradigm is presented
here.

")

#para("
A function fib can be specified as follows for computing Fibonacci numbers:
")

#textpre("
fib(0)   = 0
fib(1)   = 1
fib(n+2) = fib(n) + fib(n+1) for n >= 0
")

#para("
Following is a direct implementation of this specified function in ATS:
")

#atscode2xmld('\
fun fib (n: int): int =
  if n >= 2 then fib (n-2) + fib (n-1) else n
// end of [fib]
')

#para("\

Clearly, this is a terribly inefficient implementation of exponential
time-complexity. An implementation of fib in C is given as follows that is
of linear time-complexity:

")#comment("para")

#textpre('\
int fibc (int n) {
  int tmp, f0 = 0, f1 = 1 ;
  while (n-- > 0) { tmp = f1 ; f1 = f0 + f1 ; f0 = tmp ; } ; return f0 ;
} // end of [fibc]
')

There is obviously a logic gap between the defintion of fib and its
implementation fibc in C. In ATS, an implementation of fib can be given
that completely bridges this gap. First, the specification of fib needs to
be encoded into ATS, which is fulfilled by the declaration of the following
dataprop:

#atscode2xmls('\
dataprop FIB (int, int) =
  | FIB0 (0, 0) | FIB1 (1, 1)
  | {n:nat} {r0,r1:int} FIB2 (n+2, r0+r1) of (FIB (n, r0), FIB (n+1, r1))
// end of [FIB]
')

#para('\

This declaration introduces a type FIB for proofs, and such a type is
referred to as a prop in ATS. Intuitively, if a proof can be assgined the
type FIB(n,r) for some integers n and r, then fib(n) equals r.  In other
words, FIB(n,r) encodes the relation fib(n)=r. There are three constructors
FIB0, FIB1 and FIB2 associated with FIB, which are given the following
types corresponding to the three equations in the definition of fib:

')

#textpre('\
FIB0 : () -> FIB (0, 0)
FIB1 : () -> FIB (1, 1)
FIB2 : {n:nat} {r0,r1:int} (FIB (n, r0), FIB (n, r1) -> FIB (n+2, r0+r1)
')

#para('\
Note that {...} is the concrete syntax in ATS for universal quantification.
For instance, FIB2(FIB0(), FIB1()) is a term of the type FIB(2,1), attesting
to fib(2)=1.
')

#para('\
A fully verified implementaion of the fib function in ATS can now be given
as follows:
')

#atscode2xmld('\
fun fibats {n:nat}
  (n: int n): [r:int] (FIB (n, r) | int r) = let
  fun loop {i:nat | i <= n} {r0,r1:int} (
    pf0: FIB (i, r0), pf1: FIB (i+1, r1) | ni: int (n-i), r0: int r0, r1: int r1
  ) : [r:int] (FIB (n, r) | int r) =
    if ni > 0 then
     loop {i+1} (pf1, FIB2 (pf0, pf1) | ni - 1, r1, r0 + r1)
    else (pf0 | r0)
  // end of [loop]
in
  loop {0} (FIB0 (), FIB1 () | n, 0, 1)
end // end of [fibats]
')#comment("atscode2xmld")

#para("\
Note that fibats is assigned the following type:
")

#textpre("\
fibats : {n:nat} int(n) -> [r:int] (FIB(n,r) | int(r))
")

#para('\

where [...] is the concrete syntax in ATS for existential quantification
and the bar symbol (|) is just a separator (like a comma) for separating
proofs from values. For each integer I, int(I) is a singleton type for the
only integer whose value is I. When fibats is applied to an integer of
value n, it returns a pair consisting of a proof and an integer value r
such that the proof, which is of the type FIB(n,r), asserts fib(n)=r.
Therefore, fibats is a verified implementation of fib. Note that the loop
function directly corresponds to the while-loop in the body of fibc.

')#comment("para")

#para('\

Lastly, it should be emphasized that proofs are completely erased after
typechecking. In particular, there is no proof construction at run-time.

')#comment("para")

<!-- ****** ****** -->

</div>#comment("div/id=thePageBody-prop")
')#comment("strsub")

<!-- ****** ****** -->

#ignoretxt(
#strsub[thePageFooterSeparator]('\
<div class="Page-mysitelinks">
#mysitelinks("EXAMPLE")
</div>
'))

%{

implement
main () = {
//
val () =  $STDIO.fclose_exn (theCSSfilr)
//
val () = fprint_filsub (stdout_ref, "atslangweb_temp.html")
//
} // end of [main]

%}
